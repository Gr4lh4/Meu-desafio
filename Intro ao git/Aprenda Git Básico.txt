# Instalação

Instalar o Git no Windows é muito fácil. O projeto msysgit tem um dos procedimentos mais simples de instalação.
Simplesmente baixe o arquivo exe do instalador a partir da página do GitHub e execute-o: https://msysgit.github.com

Primeiros Passos e comandos básicos
Configurar o nome de utilizador (importante!)
       $ git config --global user.name "nome"
       $ git config --global user.email nome@dominio.pt

Como fazer download / clonar um repositório remoto
       $ cd ~/htdocs/
       $ git clone https://nomeutilizador@bitbucket.org/grownunder/teste-blog.git

Como criar um repositório local

$ cd ~/htdocs
$ cd <pasta-do-projecto>
$ git init
$ git add .
Como adicionar novos ficheiros ao controlo de versão

$ git add — mas tenha cuidado para não enviar ficheiros indesejados*.
$ git add . — Adiciona todos os ficheiros da pasta actual.

* Os ficheiros indesejados no controlo de versões são os que são gerados durante a compilação, por ex., 
executáveis gerados, bibliotecas geradas, cópia automática de ficheiros, etc.. Crie um ficheiro .gitignore 
e adicione esses ficheiros ou pastas:

*.bak
*~ diff.txt
Como receber / procurar alterações

$ git pull — avançado: use --rebase para evitar merges desnecessários

Para receber alterações num branch específico

$ git checkout
$ git pull origin
Como enviar alterações

$ git commit -a — a opção “-a” faz um commit local de todos os ficheiros modificados. E uma destas opções:
$ git push — envia alterações do branch local para o remoto equivalente (ex: master -> origin/master).
$ git push --all — envia alterações de todos os branchs.
$ git push origin <source-branch> — envia alterações de um branch local para outro remoto
Trabalhando com branchs e tags

Para criar tag (ex: lançamento de versões)

$ git tag -a v.1.4
$ git push --tags

Para criar branch

Para criar um branch e dar check-out dele:
$ git checkout -b <nome-novo-branch>
ou
$ git branch <nome-novo-branch> (porém, não dá checkout ao novo branch) e para enviar ao servidor:
$ git push -u origin <nome-novo-branch> — para enviar apenas um branch
ou
$ git push --all — envia todos os branchs locais para o repositório de origem

Para listar branchs

$ git branch (lista somente os locais)
$ git branch -a (lista todos)
$ git branch -r (lista somente os remotos)

Para alternar para um branch, tag ou versão

$ git checkout [-f] <branch, tag ou versão> — a opção -f faz com que ficheiros modificados localmente 
sejam perdidos.

Para remover um branch

$ git branch -d <nome do branch>

Para remover um branch remoto

$ git branch -d -r origin/<name-of-branch>
$ git push origin :<name-of-branch> (obs.: sem o origin)

Para mesclar (merge)

$ git checkout <nome do branch destino> (deve “estar” no branch de destino)
$ git merge <nome do branch origem> [--no-ff] (a opção –no-ff serve para não permitir o fast forward)
Desfazer/Reverter

Desfazer um commit específico e manter o histórico

$ git revert <versao>
• <versao> pode ser um intervalo, como por ex.: 0b7cd284..642e314
• <versao> também pode ser HEAD para desfazer o último commit
• não use este comando quando houver alterações locais!

Reverter apenas alguns ficheiros ou path

$ git checkout <versao> -- <path>

Desfazer ficheiro adicionado no Git por engano

$ git rm --cached <file> (funciona antes e depois do commit, recomendado!) ou $ git reset HEAD <file> 
(apenas antes do commit)

Desfazer alterações locais

Para todos os ficheiros
$ git reset --hard HEAD
Apenas para alguns ficheiros
$ git checkout -- <path>

---
Outros comandos úteis:

Verificar quantas versões desde o início (versão estilo SVN)

O seguinte comando conta quantos commits foram dados desde a primeira versão:

$ git log --pretty=oneline --all | wc -l

Mostrar histórico com o nome dos ficheiros modificados

$ git log –stat

Verificar a diferença entre a versão actual e o último commit de um determinado ficheiro

$ git diff

Use diff --color-words para destacar as palavras modificadas

Verificar as modificações locais

$ git diff -b (a opção -b ignora os espaços em brancos)

Verificar diferença entre dois branchs

$ git diff .. –stat

O mesmo que git diff HEAD^..HEAD

$ git show

Mostrar informações sobre o repositório remoto
(é útil porque mostra a URL do repositório caso a tenha esquecido)

$ git remote show origin

Opção para ignorar espaços em branco e quebras de linha

Use -w em combinação com com comandos de diff ou quando usar --stat para que o diff ignore todos os espaços
 em brancos.


